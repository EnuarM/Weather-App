{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Boot Camp Henry\\\\M2\\\\FT-M2-master\\\\09-React-Routing\\\\homework\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Cards from './components/Cards.jsx';\nimport Nav from './components/Nav.jsx';\nimport { Route, Routes } from 'react-router-dom';\nimport About from './components/About.jsx';\nimport Ciudad from './components/Ciudad.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState([]); //cities = []\n  //setCities => f(que actualiza el estado)\n\n  const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\n  function onSearch(ciudad) {\n    //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad\n    //pero de momento agregaremos una ciudad por default para ver que funcione\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  ;\n\n  function onFilter(ciudadId) {\n    let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n\n    if (ciudad.length > 0) {\n      return ciudad[0];\n    } else {\n      return null;\n    }\n  }\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        render: () => /*#__PURE__*/_jsxDEV(Cards, {\n          cities: cities,\n          onClose: onClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/about\",\n        render: About\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/ciudad/:ciudadId\",\n        render: _ref => {\n          let {\n            match\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(Ciudad, {\n            city: onFilter(match.params.ciudadId)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 34\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Cards","Nav","Route","Routes","About","Ciudad","App","cities","setCities","apiKey","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert","onFilter","ciudadId","filter","c","parseInt","length","onClose","match","params"],"sources":["C:/Users/User/Documents/Boot Camp Henry/M2/FT-M2-master/09-React-Routing/homework/src/App.js"],"sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport Cards from './components/Cards.jsx';\nimport Nav from './components/Nav.jsx';\nimport {Route,Routes} from 'react-router-dom';\nimport About from './components/About.jsx';\nimport Ciudad from './components/Ciudad.jsx'\n\n\nexport default function App() { \n\n  const[cities, setCities] = useState([]);\n  //cities = []\n      //setCities => f(que actualiza el estado)\n\n      const apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n      function onSearch(ciudad) {\n        //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad\n        //pero de momento agregaremos una ciudad por default para ver que funcione\n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n        .then(r => r.json())\n        .then((recurso) => {\n            if(recurso.main !== undefined){\n            const ciudad = {\n              min: Math.round(recurso.main.temp_min),\n              max: Math.round(recurso.main.temp_max),\n              img: recurso.weather[0].icon,\n              id: recurso.id,\n              wind: recurso.wind.speed,\n              temp: recurso.main.temp,\n              name: recurso.name,\n              weather: recurso.weather[0].main,\n              clouds: recurso.clouds.all,\n              latitud: recurso.coord.lat,\n              longitud: recurso.coord.lon\n            };\n            setCities(oldCities => [...oldCities, ciudad]);\n          }else {\n            alert(\"Ciudad no encontrada\");\n          }\n        });\n      };\n\n      function onFilter(ciudadId) {\n        let ciudad = cities.filter(c => c.id === parseInt(ciudadId));\n        if(ciudad.length > 0) {\n            return ciudad[0];\n        } else {\n            return null;\n        }\n      }\n\n      function onClose(id) {\n        setCities(oldCities => oldCities.filter(c => c.id !== id));\n      }\n\n    return (\n      <>\n      <div className=\"App\">\n        <Nav onSearch={onSearch}/>\n\n          <Route\n          exact path='/'\n            render={() => <Cards  cities={cities} onClose={onClose} />}\n          />     \n          <Route\n            exact path='/about'\n            render={About}\n          />\n          <Route\n          exact path='/ciudad/:ciudadId'\n            render={({match}) => <Ciudad city={onFilter(match.params.ciudadId)}/>}\n  />\n          \n    </div>\n    </>  \n    );    \n  }\n    \n    \n\n  "],"mappings":"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"},"metadata":{},"sourceType":"module"}